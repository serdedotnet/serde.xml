//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/andy/code/serde-dn/src/serde-xml/ReflectionTypeName.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ReflectionTypeNameParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, BRACKETS=5, IDENT=6, NUM=7;
	public const int
		RULE_topTypeName = 0, RULE_fullType = 1, RULE_typeName = 2, RULE_qualifiedName = 3, 
		RULE_generics = 4;
	public static readonly string[] ruleNames = {
		"topTypeName", "fullType", "typeName", "qualifiedName", "generics"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'`'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "BRACKETS", "IDENT", "NUM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ReflectionTypeName.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ReflectionTypeNameParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ReflectionTypeNameParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ReflectionTypeNameParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TopTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullTypeContext fullType() {
			return GetRuleContext<FullTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ReflectionTypeNameParser.Eof, 0); }
		public TopTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.EnterTopTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.ExitTopTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TopTypeNameContext topTypeName() {
		TopTypeNameContext _localctx = new TopTypeNameContext(Context, State);
		EnterRule(_localctx, 0, RULE_topTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			fullType();
			State = 11;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericsContext generics() {
			return GetRuleContext<GenericsContext>(0);
		}
		public FullTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.EnterFullType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.ExitFullType(this);
		}
	}

	[RuleVersion(0)]
	public FullTypeContext fullType() {
		FullTypeContext _localctx = new FullTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_fullType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			typeName();
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 14;
				generics();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BRACKETS() { return GetTokens(ReflectionTypeNameParser.BRACKETS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKETS(int i) {
			return GetToken(ReflectionTypeNameParser.BRACKETS, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			qualifiedName();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKETS) {
				{
				{
				State = 18;
				Match(BRACKETS);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(ReflectionTypeNameParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(ReflectionTypeNameParser.IDENT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 24;
					Match(IDENT);
					State = 25;
					Match(T__0);
					}
					} 
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 31;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullTypeContext fullType() {
			return GetRuleContext<FullTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(ReflectionTypeNameParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(ReflectionTypeNameParser.NUM, i);
		}
		public GenericsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.EnterGenerics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IReflectionTypeNameListener typedListener = listener as IReflectionTypeNameListener;
			if (typedListener != null) typedListener.ExitGenerics(this);
		}
	}

	[RuleVersion(0)]
	public GenericsContext generics() {
		GenericsContext _localctx = new GenericsContext(Context, State);
		EnterRule(_localctx, 8, RULE_generics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(T__1);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUM) {
				{
				{
				State = 34;
				Match(NUM);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(T__2);
			State = 41;
			fullType();
			State = 42;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '/', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x12', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x16', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x19', '\v', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x1D', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', ' ', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '&', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', ')', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', 
		'\x2', '\x2', '\x2', '-', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x6', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x1E', '\x3', '\x2', '\x2', '\x2', '\n', '#', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', '\a', 
		'\x2', '\x2', '\x3', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x11', '\x5', '\x6', '\x4', '\x2', '\x10', '\x12', '\x5', '\n', '\x6', 
		'\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x5', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x17', '\x5', '\b', '\x5', '\x2', '\x14', '\x16', '\a', '\a', '\x2', 
		'\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', 
		'\b', '\x2', '\x2', '\x1B', '\x1D', '\a', '\x3', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '!', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\b', '\x2', '\x2', '\"', 
		'\t', '\x3', '\x2', '\x2', '\x2', '#', '\'', '\a', '\x4', '\x2', '\x2', 
		'$', '&', '\a', '\t', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x5', 
		'\x2', '\x2', '+', ',', '\x5', '\x4', '\x3', '\x2', ',', '-', '\a', '\x6', 
		'\x2', '\x2', '-', '\v', '\x3', '\x2', '\x2', '\x2', '\x6', '\x11', '\x17', 
		'\x1E', '\'',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

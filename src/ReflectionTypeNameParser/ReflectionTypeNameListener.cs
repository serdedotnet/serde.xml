//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/andy/code/serde-dn/src/serde-xml/ReflectionTypeName.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ReflectionTypeNameParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IReflectionTypeNameListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ReflectionTypeNameParser.topTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopTypeName([NotNull] ReflectionTypeNameParser.TopTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ReflectionTypeNameParser.topTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopTypeName([NotNull] ReflectionTypeNameParser.TopTypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ReflectionTypeNameParser.fullType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFullType([NotNull] ReflectionTypeNameParser.FullTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ReflectionTypeNameParser.fullType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFullType([NotNull] ReflectionTypeNameParser.FullTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ReflectionTypeNameParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] ReflectionTypeNameParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ReflectionTypeNameParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] ReflectionTypeNameParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ReflectionTypeNameParser.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedName([NotNull] ReflectionTypeNameParser.QualifiedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ReflectionTypeNameParser.qualifiedName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedName([NotNull] ReflectionTypeNameParser.QualifiedNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ReflectionTypeNameParser.generics"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenerics([NotNull] ReflectionTypeNameParser.GenericsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ReflectionTypeNameParser.generics"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenerics([NotNull] ReflectionTypeNameParser.GenericsContext context);
}
